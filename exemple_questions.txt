<p>Is there a better way of doing a query like this:</p>\n\n<pre><code>SELECT COUNT(*) \nFROM (SELECT DISTINCT DocumentId, DocumentSessionId\n FROM DocumentOutputItems) AS internalQuery\n</code></pre>\n\n<p>I need to count the number of distinct items from this table but the distinct is over two columns.</p>\n\n<p>My query works fine but I was wondering if I can get the final result using just one query (without using a sub-query)</p>\n	




question 2 : 
<p>You can use the function <code>tz_localize</code> to make a Timestamp or DateTimeIndex timezone aware, but how can you do the opposite: how can you convert a timezone aware Timestamp to a naive one, while preserving its timezone?</p>\n\n<p>An example:</p>\n\n<pre><code>In [82]: t = pd.date_range(start="2013-05-18 12:00:00", periods=10, freq='s', tz="Europe/Brussels")\n\nIn [83]: t\nOut[83]: \n&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;\n[2013-05-18 12:00:00, ..., 2013-05-18 12:00:09]\nLength: 10, Freq: S, Timezone: Europe/Brussels\n</code></pre>\n\n<p>I could remove the timezone by setting it to None, but then the result is converted to UTC (12 o'clock became 10):</p>\n\n<pre><code>In [86]: t.tz = None\n\nIn [87]: t\nOut[87]: \n&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;\n[2013-05-18 10:00:00, ..., 2013-05-18 10:00:09]\nLength: 10, Freq: S, Timezone: None\n</code></pre>\n\n<p>Is there another way I can convert a DateTimeIndex to timezone naive, but while preserving the timezone it was set in?</p>\n\n<hr>\n\n<p>Some <strong>context</strong> on the reason I am asking this: I want to work with timezone naive timeseries (to avoid the extra hassle with timezones, and I do not need them for the case I am working on).<br>\nBut for some reason, I have to deal with a timezone-aware timeseries in my local timezone (Europe/Brussels). As all my other data are timezone naive (but represented in my local timezone), I want to convert this timeseries to naive to further work with it, but it also has to be represented in my local timezone (so just remove the timezone info, without converting the <em>user-visible</em> time to UTC). </p>\n\n<p>I know the time is actually internal stored as UTC and only converted to another timezone when you represent it, so there has to be some kind of conversion when I want to "delocalize" it. For example, with the python datetime module you can "remove" the timezone like this:</p>\n\n<pre><code>In [119]: d = pd.Timestamp("2013-05-18 12:00:00", tz="Europe/Brussels")\n\nIn [120]: d\nOut[120]: &lt;Timestamp: 2013-05-18 12:00:00+0200 CEST, tz=Europe/Brussels&gt;\n\nIn [121]: d.replace(tzinfo=None)\nOut[121]: &lt;Timestamp: 2013-05-18 12:00:00&gt; \n</code></pre>\n\n<p>So, based on this, I could do the following, but I suppose this will not be very efficient when working with a larger timeseries:</p>\n\n<pre><code>In [124]: t\nOut[124]: \n&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;\n[2013-05-18 12:00:00, ..., 2013-05-18 12:00:09]\nLength: 10, Freq: S, Timezone: Europe/Brussels\n\nIn [125]: pd.DatetimeIndex([i.replace(tzinfo=None) for i in t])\nOut[125]: \n&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;\n[2013-05-18 12:00:00, ..., 2013-05-18 12:00:09]\nLength: 10, Freq: None, Timezone: None\n</code></pre>\n

question3
<p>I'm really struggling with trying to read a JSON file into Swift so I can play around with it. I've spent the best part of 2 days re-searching and trying different methods but no luck as of yet so I have signed up to StackOverFlow to see if anyone can point me in the right direction.....</p>\n\n<p>My JSON file is called test.json and contains the following:</p>\n\n<pre><code>{\n "person":[\n {\n "name": "Bob",\n "age": "16",\n "employed": "No"\n },\n {\n "name": "Vinny",\n "age": "56",\n "employed": "Yes"\n }\n ]\n} \n</code></pre>\n\n<p>The file is stored in the documents directly and I access it using the following code:</p>\n\n<pre><code>let file = "test.json"\nlet dirs : String[] = NSSearchPathForDirectoriesInDomains(\n NSSearchpathDirectory.DocumentDirectory,\n NSSearchPathDomainMask.AllDomainMask,\n true) as String[]\n\nif (dirs != nil) {\n let directories: String[] = dirs\n let dir = directories[0]\n let path = dir.stringByAppendingPathComponent(file)\n}\n\nvar jsonData = NSData(contentsOfFile:path, options: nil, error: nil)\nprintln("jsonData \(jsonData)" // This prints what looks to be JSON encoded data.\n\nvar jsonDict = NSJSONSerialization.JSONObjectWithData(jsonData, options: nil, error: nil) as? NSDictionary\n\nprintln("jsonDict \(jsonDict)") - This prints nil..... \n</code></pre>\n\n<p>If anyone can just give me a push in the right direction on how I can de-serialize the JSON file and put it in an accessible Swift object I will be eternally grateful! </p>\n\n<p>Kind Regards,</p>\n\n<p>Krivvenz.</p>\n

question 4:
<p>So I started writing tests for our Java-Spring-project. </p>\n\n<p>What I use is JUnit and Mockito. It's said, that when I use the when()...thenReturn() option I can mock services, without simulating them or so. So what I want to do is, to set:</p>\n\n<pre><code>when(classIwantToTest.object.get().methodWhichReturnsAList(input))thenReturn(ListcreatedInsideTheTestClass) \n</code></pre>\n\n<p>But no matter which when-clause I do, I always get a NullpointerException, which of course makes sense, because input is null. </p>\n\n<p>Also when I try to mock another method from an object: </p>\n\n<pre><code>when(object.method()).thenReturn(true)\n</code></pre>\n\n<p>There I also get a Nullpointer, because the method needs a variable, which isn't set. </p>\n\n<p>But I want to use when()..thenReturn() to get around creating this variable and so on. I just want to make sure, that if any class calls this method, then no matter what, just return true or the list above.</p>\n\n<p>Is it a basically misunderstanding from my side, or is there something else wrong?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre><code>public class classIWantToTest implements classIWantToTestFacade{\n @Autowired\n private SomeService myService;\n\n @Override\n public Optional&lt;OutputData&gt; getInformations(final InputData inputData) {\n final Optional&lt;OutputData&gt; data = myService.getListWithData(inputData);\n if (data.isPresent()) {\n final List&lt;ItemData&gt; allData = data.get().getItemDatas();\n //do something with the data and allData\n return data;\n }\n\n return Optional.absent();\n } \n}\n</code></pre>\n\n<p>And here is my test class:</p>\n\n<pre><code>public class Test {\n\n private InputData inputdata;\n\n private ClassUnderTest classUnderTest;\n\n final List&lt;ItemData&gt; allData = new ArrayList&lt;ItemData&gt;();\n\n @Mock\n private DeliveryItemData item1;\n\n @Mock\n private DeliveryItemData item2;\n\n\n\n @Mock\n private SomeService myService;\n\n\n @Before\n public void setUp() throws Exception {\n classUnderTest = new ClassUnderTest();\n myService = mock(myService.class); \n classUnderTest.setService(myService);\n item1 = mock(DeliveryItemData.class);\n item2 = mock(DeliveryItemData.class);\n\n }\n\n\n @Test\n public void test_sort() {\n createData();\n when(myService.getListWithData(inputdata).get().getItemDatas());\n\n when(item1.hasSomething()).thenReturn(true);\n when(item2.hasSomething()).thenReturn(false);\n\n }\n\n public void createData() {\n item1.setSomeValue("val");\n item2.setSomeOtherValue("test");\n\n item2.setSomeValue("val");\n item2.setSomeOtherValue("value");\n\n allData.add(item1);\n allData.add(item2);\n\n\n}\n</code></pre>\n

question 5:
<p>In this C++ code, sorting the data (<em>before</em> the timed region) makes the primary loop ~6x faster:</p>\n<pre class="lang-cpp prettyprint-override"><code>#include &lt;algorithm&gt;\n#include &lt;ctime&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n // Generate data\n const unsigned arraySize = 32768;\n int data[arraySize];\n\n for (unsigned c = 0; c &lt; arraySize; ++c)\n data[c] = std::rand() % 256;\n\n // !!! With this, the next loop runs faster.\n std::sort(data, data + arraySize);\n\n // Test\n clock_t start = clock();\n long long sum = 0;\n for (unsigned i = 0; i &lt; 100000; ++i)\n {\n for (unsigned c = 0; c &lt; arraySize; ++c)\n { // Primary loop.\n if (data[c] &gt;= 128)\n sum += data[c];\n }\n }\n\n double elapsedTime = static_cast&lt;double&gt;(clock()-start) / CLOCKS_PER_SEC;\n\n std::cout &lt;&lt; elapsedTime &lt;&lt; '\n';\n std::cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; '\n';\n}\n</code></pre>\n<ul>\n<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>\n<li>With the sorted data, the code runs in 1.93 seconds.</li>\n</ul>\n<p>(Sorting itself takes more time than this one pass over the array, so it's not actually worth doing if we needed to calculate this for an unknown array.)</p>\n<hr />\n<p>Initially, I thought this might be just a language or compiler anomaly, so I tried Java:</p>\n<pre class="lang-java prettyprint-override"><code>import java.util.Arrays;\nimport java.util.Random;\n\npublic class Main\n{\n public static void main(String[] args)\n {\n // Generate data\n int arraySize = 32768;\n int data[] = new int[arraySize];\n\n Random rnd = new Random(0);\n for (int c = 0; c &lt; arraySize; ++c)\n data[c] = rnd.nextInt() % 256;\n\n // !!! With this, the next loop runs faster\n Arrays.sort(data);\n\n // Test\n long start = System.nanoTime();\n long sum = 0;\n for (int i = 0; i &lt; 100000; ++i)\n {\n for (int c = 0; c &lt; arraySize; ++c)\n { // Primary loop.\n if (data[c] &gt;= 128)\n sum += data[c];\n }\n }\n\n System.out.println((System.nanoTime() - start) / 1000000000.0);\n System.out.println(&quot;sum = &quot; + sum);\n }\n}\n</code></pre>\n<p>With a similar but less extreme result.</p>\n<hr />\n<p>My first thought was that sorting brings the data into the <a href="https://en.wikipedia.org/wiki/CPU_cache" rel="noreferrer">cache</a>, but that's silly because the array was just generated.</p>\n<ul>\n<li>What is going on?</li>\n<li>Why is processing a sorted array faster than processing an unsorted array?</li>\n</ul>\n<p>The code is summing up some independent terms, so the order should not matter.</p>\n<hr />\n<p><strong>Related / follow-up Q&amp;As</strong> about the same effect with different/later compilers and options:</p>\n<ul>\n<li><a href="https://stackoverflow.com/q/66521344">Why is processing an unsorted array the same speed as processing a sorted array with modern x86-64 clang?</a></li>\n<li><a href="https://stackoverflow.com/q/28875325">gcc optimization flag -O3 makes code slower than -O2</a></li>\n</ul>\n	

question 6:
<p>Our web application is running in .NET Framework 4.0. The UI calls the controller methods through Ajax calls.</p>\n<p>We need to consume the REST service from our vendor. I am evaluating the best way to call the REST service in .NET 4.0. The REST service requires a basic authentication scheme and it can return data in both XML and JSON.</p>\n<p>There isn't any requirement for uploading/downloading huge data and I don't see anything in future. I took a look at few open source code projects for REST consumption and didn't find any value in those to justify additional dependency in the project. I started to evaluate <code>WebClient</code> and <code>HttpClient</code>. I downloaded HttpClient for .NET 4.0 from <a href="https://en.wikipedia.org/wiki/NuGet" rel="noreferrer">NuGet</a>.</p>\n<p>I searched for differences between <code>WebClient</code> and <code>HttpClient</code> and <a href="https://web.archive.org/web/20140217233914/http://blogs.k10world.com/technology/webclient-httpclient-consume-http-requests/" rel="noreferrer">this site</a> mentioned that single HttpClient can handle concurrent calls and it can reuse resolved DNS, cookie configuration and authentication. I am yet to see practical values that we may gain due to the differences.</p>\n<p>I did a quick performance test to find how <code>WebClient</code> (synchronous calls), <code>HttpClient</code> (synchronous and asynchronous) perform. And here are the results:</p>\n<p>I am using the same <code>HttpClient</code> instance for all the requests (minimum - maximum).</p>\n<blockquote>\n<p>WebClient sync: 8 ms - 167 ms <br />\nHttpClient sync: 3 ms - 7228 ms <br />\nHttpClient async: 985 - 10405 ms</p>\n</blockquote>\n<p>Using a new <code>HttpClient</code> for each request (minimum - maximum):</p>\n<blockquote>\n<p>WebClient sync: 4 ms - 297 ms <br />\nHttpClient sync: 3 ms - 7953 ms <br />\nHttpClient async: 1027 - 10834 ms</p>\n</blockquote>\n<h2>Code</h2>\n<pre class="lang-cs prettyprint-override"><code>public class AHNData\n{\n public int i;\n public string str;\n}\n\npublic class Program\n{\n public static HttpClient httpClient = new HttpClient();\n private static readonly string _url = &quot;http://localhost:9000/api/values/&quot;;\n\n public static void Main(string[] args)\n {\n #region &quot;Trace&quot;\n Trace.Listeners.Clear();\n\n TextWriterTraceListener twtl = new TextWriterTraceListener(\n &quot;C:\\Temp\\REST_Test.txt&quot;);\n twtl.Name = &quot;TextLogger&quot;;\n twtl.TraceOutputOptions = TraceOptions.ThreadId | TraceOptions.DateTime;\n\n ConsoleTraceListener ctl = new ConsoleTraceListener(false);\n ctl.TraceOutputOptions = TraceOptions.DateTime;\n\n Trace.Listeners.Add(twtl);\n Trace.Listeners.Add(ctl);\n Trace.AutoFlush = true;\n #endregion\n\n int batchSize = 1000;\n\n ParallelOptions parallelOptions = new ParallelOptions();\n parallelOptions.MaxDegreeOfParallelism = batchSize;\n\n ServicePointManager.DefaultConnectionLimit = 1000000;\n\n Parallel.For(0, batchSize, parallelOptions,\n j =&gt;\n {\n Stopwatch sw1 = Stopwatch.StartNew();\n GetDataFromHttpClientAsync&lt;List&lt;AHNData&gt;&gt;(sw1);\n });\n Parallel.For(0, batchSize, parallelOptions,\n j =&gt;\n {\n Stopwatch sw1 = Stopwatch.StartNew();\n GetDataFromHttpClientSync&lt;List&lt;AHNData&gt;&gt;(sw1);\n });\n Parallel.For(0, batchSize, parallelOptions,\n j =&gt;\n {\n using (WebClient client = new WebClient())\n {\n Stopwatch sw = Stopwatch.StartNew();\n byte[] arr = client.DownloadData(_url);\n sw.Stop();\n\n Trace.WriteLine(&quot;WebClient Sync &quot; + sw.ElapsedMilliseconds);\n }\n });\n\n Console.Read();\n }\n\n public static T GetDataFromWebClient&lt;T&gt;()\n {\n using (var webClient = new WebClient())\n {\n webClient.BaseAddress = _url;\n return JsonConvert.DeserializeObject&lt;T&gt;(\n webClient.DownloadString(_url));\n }\n }\n\n public static void GetDataFromHttpClientSync&lt;T&gt;(Stopwatch sw)\n {\n HttpClient httpClient = new HttpClient();\n var response = httpClient.GetAsync(_url).Result;\n var obj = JsonConvert.DeserializeObject&lt;T&gt;(\n response.Content.ReadAsStringAsync().Result);\n sw.Stop();\n\n Trace.WriteLine(&quot;HttpClient Sync &quot; + sw.ElapsedMilliseconds);\n }\n\n public static void GetDataFromHttpClientAsync&lt;T&gt;(Stopwatch sw)\n {\n HttpClient httpClient = new HttpClient();\n var response = httpClient.GetAsync(_url).ContinueWith(\n (a) =&gt; {\n JsonConvert.DeserializeObject&lt;T&gt;(\n a.Result.Content.ReadAsStringAsync().Result);\n sw.Stop();\n Trace.WriteLine(&quot;HttpClient Async &quot; + sw.ElapsedMilliseconds);\n }, TaskContinuationOptions.None);\n }\n }\n}\n</code></pre>\n<h2>My Questions</h2>\n<ol>\n<li>The REST calls return in 3-4 seconds which is acceptable. Calls to REST\nservice are initiated in the controller methods which gets invoked from\nAjax calls. To begin with, the calls runs in a different thread and doesn't block the UI. So, can I just stick with synchronous calls?</li>\n<li>The above code was run in my localbox. In a production setup, DNS and proxy\nlookup will be involved. Is there an advantage of using <code>HttpClient</code> over <code>WebClient</code>?</li>\n<li>Is <code>HttpClient</code> concurrency better than <code>WebClient</code>? From the test results, I see <code>WebClient</code> synchronous calls perform better.</li>\n<li>Will <code>HttpClient</code> be a better design choice if we upgrade to .NET 4.5? Performance is the key design factor.</li>\n</ol>\n	

